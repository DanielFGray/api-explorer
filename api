#!/usr/bin/env bash

usage() {
  echo 'usage: api <profile> <action> <endpoint> [...data]'
}

declare profile
declare url
declare -a args
declare verbose=0

declare -r config_dir="${XDG_CONFIG_DIR:-$HOME/.config}/api-helper"
declare -A colors
colors[red]=$(tput setaf 1)
colors[green]=$(tput setaf 2)
colors[blue]=$(tput setaf 4)
colors[reset]=$(tput sgr0)

color() {
  local color="$1"; shift
  printf '%s' "${colors[$color]}"
  printf '%s\n' "$@"
  printf '%s' "${colors[reset]}"
}

err() { color red "$@" >&2; return 1; }

die() {
  (( $# > 0 )) && err "$@"
  exit 1
}

has() {
  local v=0
  if [[ $1 = '-v' ]]; then
    v=1
    shift
  fi
  for c; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      (( v > 0 )) && err "$c not found"
      return 1
    fi
  done
}

parse_config_file() {
  local line key val nr=0
  config_err=()
  while IFS= read -r line; do
    (( ++nr ))
    [[ -z "$line" || "$line" = '#'* ]] && continue
    space=${line%%[![:space:]]*}
    line=${line#"$space"}
    key=${line%% *}
    line=${line#"$key"}
    space=${line%%[![:space:]]*}
    val=${line#"$space"}
    [[ $key = '"'*'"' ]] && key=${key/#\"} key=${key/%\"}
    if [[ -z "$val" ]]; then
      config_err+=( "  missing value for \"$key\" in config file on line $nr" )
      continue
    fi
    case "$key" in
      url) url="$val" ;;
      *) args+=( "--$key" "$val" ) ;;
    esac
  done
  if (( ${#config_err[@]} > 0 )); then
    err 'there were errors parsing config file:' "${config_err[@]}"
  fi
}

has -v curl || die

case "$1" in
  -h|--help)
    usage
    exit
    ;;
  -v|--verbose) verbose=1; shift ;;
  -vv) verbose=2; shift ;;
  -vvv) verbose=3; shift ;;
esac

[[ -z "$1" ]] && die 'please specify a profile'

profile="$1"
if [[ -r "${config_dir}/$profile" ]]; then
  parse_config_file < "${config_dir}/$profile"
else
  die "could not find or open ${config_dir}/$profile"
fi

if [[ -z "$url" ]]; then
  die "url is not defined for $profile"
fi

if (( $# < 3 )); then
  err 'Not enough options specified'
  usage
  die
fi

args+=( --request "${2^^}" )

printf -v endpoint '%s/%s' "${url/%\/}" "${3#\/}"

shift 3

while true; do
  case "$1" in
    --json)
      has jq || die 'jq must be installed for --json'
      args+=( --data "$(jq -Mcn "$2")" )
      shift
      ;;
    *) args+=( "$1" )
  esac
  shift || break
done

case "$verbose" in
  0|1) args+=( -s ) ;;
  2) args+=( ) ;;
  *) args+=( -v ) ;;
esac

cmd=( curl "${args[@]}" "$endpoint" )

((verbose > 0 )) && echo "${cmd[*]}" >&2
"${cmd[@]}"
